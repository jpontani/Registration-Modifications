diff --git a/includes/registration.entity.inc b/includes/registration.entity.inc
index ff9e338..fd4f9d2 100644
--- a/includes/registration.entity.inc
+++ b/includes/registration.entity.inc
@@ -9,7 +9,7 @@
  * Implements hook_entity_info().
  */
 function registration_entity_info() {
-  return array(
+  $entities = array(
     'registration' => array(
       'module' => 'registration',
       'label' => t('Registration'),
@@ -24,15 +24,7 @@ function registration_entity_info() {
       'bundle keys' => array(
         'bundle' => 'type',
       ),
-      'bundles' => array(
-        'registration' => array(
-          'label' => 'Registration',
-          'admin' => array(
-            'path' => 'admin/structure/registration/manage',
-            'access arguments' => array('administer registration'),
-          ),
-        ),
-      ),
+      'bundles' => array(),
       'view modes' => array(
         'full' => array(
           'label' => t('Full Registration'),
@@ -43,6 +35,18 @@ function registration_entity_info() {
       'token type' => 'registration',
     ),
   );
+  
+  foreach (registration_entity_types() as $type => $info) {
+    $entities['registration']['bundles'][$type] = array(
+      'label' => $info->name,
+      'admin' => array(
+        'path' => 'admin/structure/registration/types/' . $info->type . '/manage',
+        'access arguments' => array('administer registration'),
+      ),
+    );
+  }
+  
+  return $entities;
 }
 
 function registration_uri($registration) {
@@ -104,6 +108,40 @@ function registration_entity_property_info_alter(&$info) {
 }
 
 /**
+ * Returns all the bundles for the registration entity.
+ */
+function registration_entity_types() {
+  $types = &drupal_static(__FUNCTION__);
+  if (empty($types)) {
+    // types array is empty, so lets load it
+    $types = array();
+    
+    $tq = db_select('registration_type', 'rt')->fields('rt')->execute();
+    foreach ($tq as $row) {
+      $types[$row->type] = $row;
+    }
+  }
+  return $types;
+}
+
+/**
+ * Resets the cached list of registration types.
+ */
+function registration_entity_types_reset() {
+  $registration_types = &drupal_static('registration_entity_types');
+  $registration_types = NULL;
+}
+
+/**
+ * Loads a registration type.
+ */
+function registration_type_load($type) {
+  $types = registration_entity_types();
+  $type = str_replace('-', '_', $type);
+  return isset($types[$type]) ? $types[$type] : FALSE;
+}
+
+/**
  * Loads a registration by ID.
  */
 function registration_load($registration_id) {
@@ -169,4 +207,3 @@ function registration_save($registration) {
 
   return entity_get_controller('registration')->save($registration);
 }
-
diff --git a/registration.module b/registration.module
index b65fa79..180a24e 100644
--- a/registration.module
+++ b/registration.module
@@ -7,23 +7,117 @@
 
 module_load_include('inc', 'registration', 'includes/registration.entity');
 
+function registration_edit_type($type) {
+  return "Edit $type";
+}
+
+function registration_delete_type($type) {
+  return "Delete $type";
+}
+
+function registration_types_page() {
+  $header = array(t('Name'), t('Operations'));
+  $rows = array();
+  foreach (registration_entity_types() as $type => $info) {
+    $links = array(
+      'edit' => array(
+        'title' => 'edit',
+        'href' => 'admin/structure/registration/types/' . $type . '/edit',
+      ),
+      'manage fields' => array(
+        'title' => 'manage fields',
+        'href' => 'admin/structure/registration/types/' . $type . '/manage/fields',
+      ),
+      'manage display' => array(
+        'title' => 'manage display',
+        'href' => 'admin/structure/registration/types/' . $type . '/manage/display',
+      ),
+      'delete' => array(
+        'title' => 'delete',
+        'href' => 'admin/structure/registration/types/' . $type . '/delete',
+      ),
+    );
+    $rows[] = array(
+      theme('registration_types', array('type' => $info)),
+      theme('links', array('links' => $links, 'attributes' => array('class' => 'links inline operations'))),
+    );
+  }
+  
+  if (empty($rows)) {
+    $rows[] = array(
+      array(
+        'data' => t('There are no registration types yet. <a href="@link">Add a Registration Type</a>', array('@link' => url('admin/structure/registration/types/add'))),
+        'colspan' => 2,
+      ),
+    );
+  }
+  
+  return theme('table', array('header' => $header, 'rows' => $rows));
+}
+
+function theme_registration_types($variables) {
+  $type = $variables['type'];
+
+  $output = check_plain($type->name);
+  $output .= ' <small> (Machine name: ' . check_plain($type->type) . ')</small>';
+  $output .= '<div class="description">' . filter_xss_admin($type->description) . '</div>';
+
+  return $output;
+}
+
+function registration_menu_alter(&$items) {
+  foreach (registration_entity_types() as $type => $info) {
+    $items['admin/structure/registration/types/' . $type . '/manage/fields']['context'] = MENU_CONTEXT_INLINE;
+    $items['admin/structure/registration/types/' . $type . '/manage/display']['context'] = MENU_CONTEXT_INLINE;
+  }
+}
+
 /**
  * Implements hook_menu().
  */
 function registration_menu() {
-  $items['admin/structure/registration/manage'] = array(
+  $items['admin/structure/registration'] = array(
     'title' => 'Registration',
-    'description' => 'Manage Registration structure',
-    'page callback' => 'registration_admin_page',
+    'description' => 'Manage Registration settings and types',
     'access arguments' => array('administer registration'),
-		
+    'page callback' => 'registration_admin_page',
   );
-  $items['admin/structure/registration/manage/settings'] = array(
+  $items['admin/structure/registration/settings'] = array(
     'title' => 'Settings',
-    'description' => 'Manage Registration settings',
+    'description' => 'Manage Registration settings and types',
+    'access arguments' => array('administer registration'),
+    'page callback' => 'registration_admin_page',
     'type' => MENU_DEFAULT_LOCAL_TASK,
   );
-
+  $items['admin/structure/registration/types'] = array(
+    'title' => 'Types',
+    'description' => 'Manage Registration Types',
+    'type' => MENU_LOCAL_TASK,
+    'page callback' => 'registration_types_page',
+    'access arguments' => array('administer registration'),
+  );
+  $items['admin/structure/registration/types/add'] = array(
+    'title' => 'Add a Registration Type',
+    'type' => MENU_LOCAL_ACTION,
+    'page callback' => 'registration_type_add',
+    'access arguments' => array('administer registration'),
+  );
+  $items['admin/structure/registration/types/%/edit'] = array(
+    'title' => 'edit',
+    'page callback' => 'registration_edit_type',
+    'page arguments' => array(4),
+    'access arguments' => array('administer registration'),
+    'context' => MENU_CONTEXT_INLINE,
+    'type' => MENU_LOCAL_ACTION,
+  );
+  $items['admin/structure/registration/types/%/delete'] = array(
+    'title' => 'delete',
+    'page callback' => 'registration_delete_type',
+    'page arguments' => array(4),
+    'access arguments' => array('administer registration'),
+    'context' => MENU_CONTEXT_INLINE,
+    'type' => MENU_LOCAL_ACTION,
+  );
   $items['registration/%registration'] = array(
     'title callback' => 'registration_page_title',
     'title arguments' => array(1),
@@ -143,13 +237,7 @@ function registration_admin_page() {
   );
   $out = theme('table', $table);
 
-  return t('The following table lists the registration status for each content 
-		type. You can enable/disable registrations from the content type settings 
-		page. You can also !manage_fields and their !display_settings.', 
-		array(
-			'!manage_fields' => l('manage registration fields', 'admin/structure/registration/manage/fields'),
-			'!display_settings' => l('display settings', 'admin/structure/registration/manage/display'),
-		)) . $out;
+  return $out;
 }
 
 /**
@@ -363,6 +451,9 @@ function registration_theme() {
     'registration' => array(
       'arguments' => array('registration' => NULL),
     ),
+    'registration_types' => array(
+      'arguments' => array('types' => NULL),
+    ),
   );
 }
 
@@ -508,4 +599,4 @@ function registration_cron() {
 			->condition('nid', $node->nid)
 			->execute();
 	}
-}
+}
\ No newline at end of file
