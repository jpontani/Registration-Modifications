<?php

/**
 * @file
 * Schema and installation hooks for registration module.
 */

/**
 * Implements hook_schema().
 */
function registration_schema() {
  $schema['registration'] = array(
    'description' => 'The base table for registration module.',
    'fields' => array(
      'registration_id' => array(
        'description' => 'The primary identifier for a registration.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'type' => array(
        'description' => 'The {registration_type}.type of this registration.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'entity_type' => array(
        'description' => 'The entity type that this registration is tied to.',
        'type' => 'varchar',
        'length' => 100,
        'not null' => TRUE,
      ),
      'entity_bundle' => array(
        'description' => 'The entity bundle that this registration is tied to.',
        'type' => 'varchar',
        'length' => 100,
        'not null' => TRUE,
      ),
      'eid' => array(
        'description' => 'The id of the entity this registration is associated with.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'mail' => array(
        'type' => 'varchar',
        'length' => 254,
        'not null' => TRUE,
        'default' => '',
        'description' => "User's e-mail address.",
      ),
      'count' => array(
        'description' => 'How many slots this registration should use towards the total capacity for this event.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
      ),
      'author_uid' => array(
        'description' => 'The uid of the user who created this registration.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'created' => array(
        'description' => 'The Unix timestamp when the registration was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'updated' => array(
        'description' => 'The Unix timestamp when the registration was most recently saved.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'status' => array(
        'description' => 'The status of this registration.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'indexes' => array(
      'registration_updated' => array('updated'),
      'registration_created' => array('created'),
      'registration_type' => array(array('type', 4)),
    ),
    'foreign keys' => array(
      'registration_node' => array(
        'table' => 'node',
        'columns' => array('nid' => 'nid'),
      ),
      'registration_author' => array(
        'table' => 'users',
        'columns' => array('author_uid' => 'uid'),
      ),
    ),
    'unique keys' => array(
      'eid_mail' => array('eid', 'mail'),
    ),
    'primary key' => array('registration_id'),
  );

  $schema['registration_node'] = array(
    'description' => 'Registration per-entity settings.',
    'fields' => array(
      'nid' => array(
        'description' => 'Node id these registration settings are for.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'capacity' => array(
        'description' => 'Maximum number of users who can signup for this event.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'status' => array(
        'description' => 'Boolean indicating if signups are open (1) or closed (0) for the given node',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
      ),
      'send_reminder' => array(
        'description' => 'Boolean indicating whether reminder emails should be sent. This is set to 0 once the reminders are sent.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'reminder_date' => array(
        'description' => 'Date to send the reminder on.',
        'mysql_type' => 'datetime',
        'pgsql_type' => 'timestamp',
        'not null' => FALSE,
      ),
      'reminder_template' => array(
        'description' => 'Reminder email template.',
        'type' => 'text',
        'size' => 'big',
        'not null' => FALSE,
      ),
      'settings' => array(
        'type' => 'blob',
        'not null' => TRUE,
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'A serialized object that stores additional registration settings.',
      ),
    ),
    'foreign keys' => array(
      'registration_node_node' => array(
        'table' => 'node',
        'columns' => array('nid' => 'nid'),
      ),
    ),
    'primary key' => array('nid'),
  );

  $schema['registration_type'] = array(
    'description' => 'Registration entity types.',
    'fields' => array(
      'type' => array(
        'description' => 'Bundle (machine name) of the registration entity.',
        'type' => 'varchar',
        'length' => '50',
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => 'Human readable name of the registration entity.',
        'type' => 'varchar',
        'length' => '100',
        'not null' => TRUE,
      ),
      'description' => array(
        'description' => 'Description of the registration entity.',
        'type' => 'text',
      ),
      'created' => array(
        'description' => 'Unix timestamp of creation date.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'changed' => array(
        'description' => 'Unix timestamp of changed date.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('type'),
  );

  $schema['registration_attach'] = array(
    'description' => 'Registration bundles associated to specific entities.',
    'fields' => array(
      'entity_id' => array(
        'description' => 'Entity ID our registration bundle is attached to.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'entity_type' => array(
        'description' => 'Entity type our registration bundle is attached to.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'entity_bundle' => array(
        'description' => 'Entity bundle our registration bundle is attached to.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'registration_bundle' => array(
        'description' => 'The registration bundle we are attaching.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'settings' => array(
        'description' => 'Serialized object of our registration settings.',
        'type' => 'text',
        'size' => 'big',
        'not null' => TRUE,
        'serialize' => TRUE,
      ),
    ),
    'primary key' => array('entity_id', 'entity_type', 'entity_bundle'),
  );

  return $schema;
}
