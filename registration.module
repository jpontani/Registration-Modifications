<?php

/**
 * @file
 * Module file for registrations.
 */

module_load_include('inc', 'registration', 'includes/registration.entity');

/**
 * Form callback for adding or editing a registration type.
 */
function registration_type_form($form, &$form_state, $type = NULL) {
  $name = '';
  $machine = '';
  $desc = '';
  $op = 'new';
  $mtype = FALSE;
  $form = array();

  if (is_string($type)) {
    $mtype = registration_type_load($type);
  }

  if ($mtype) {
    $name = $mtype->name;
    $machine = $mtype->type;
    $desc = $mtype->description;
    $op = 'edit';
    $form['bundle_old'] = array(
      '#type' => 'hidden',
      '#value' => $machine,
    );
  }

  $form['pop'] = array(
    '#type' => 'hidden',
    '#default_value' => $op,
    '#value' => $op,
  );
  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => 'Name',
    '#default_value' => $name,
  );
  $form['bundle'] = array(
    '#type' => 'machine_name',
    '#title' => 'Machine name',
    '#machine_name' => array(
      'exists' => 'registration_entity_type_exists',
    ),
    '#default_value' => $machine,
  );
  $form['description'] = array(
    '#type' => 'textarea',
    '#title' => 'Description',
    '#default_value' => $desc,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
  );

  return $form;
}

/**
 * Submit handler for adding or editing a registration type.
 */
function registration_type_form_submit($form, $form_state) {
  $op = $form_state['values']['pop'];
  $msg = '';
  $record = (object) array(
    'name' => $form_state['values']['name'],
    'type' => $form_state['values']['bundle'],
    'description' => $form_state['values']['description'],
    'created' => REQUEST_TIME,
    'changed' => REQUEST_TIME,
  );
  $ret = '';
  switch ($op) {
    case 'new':
      $ret = drupal_write_record('registration_type', $record);
      $msg = t(' created.');
      field_attach_create_bundle('registration', $form_state['values']['bundle']);
      break;
    case 'edit':
      unset($record->created);
      $ret = drupal_write_record('registration_type', $record, array('type'));
      $msg = t(' updated.');
      field_attach_rename_bundle('registration', $form_state['values']['bundle_old'], $form_state['values']['bundle']);
      break;
  }
  entity_info_cache_clear();
  registration_entity_types_reset();
  drupal_set_message(t('Registration entity <em>@type</em> has been @msg.'), array('@type' => $record->type, '@msg' => $msg));
  drupal_goto('admin/structure/registration/types');
}

/**
 * Machine name existence callback.
 */
function registration_entity_type_exists($type) {
  $types = registration_entity_types();
  if (array_key_exists($type, $types)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Delete form callback.
 *
 * @todo Delete all registrations of that type.
 * @todo Delete all variables that have this type as the registration entity.
 * @todo Delete all fields associated with only this entity.
 */
function registration_delete_type($type) {
  return "Delete $type";
}

/**
 * Page callback to list all registration types.
 */
function registration_types_page() {
  $header = array(t('Name'), t('Operations'));
  $rows = array();
  foreach (registration_entity_types() as $type => $info) {
    $links = array(
      'edit' => array(
        'title' => 'edit',
        'href' => 'admin/structure/registration/types/' . $type . '/edit',
      ),
      'manage fields' => array(
        'title' => 'manage fields',
        'href' => 'admin/structure/registration/types/' . $type . '/manage/fields',
      ),
      'manage display' => array(
        'title' => 'manage display',
        'href' => 'admin/structure/registration/types/' . $type . '/manage/display',
      ),
      'delete' => array(
        'title' => 'delete',
        'href' => 'admin/structure/registration/types/' . $type . '/delete',
      ),
    );
    $rows[] = array(
      theme('registration_types', array('type' => $info)),
      theme('links', array('links' => $links, 'attributes' => array('class' => 'links inline operations'))),
    );
  }
  
  if (empty($rows)) {
    $rows[] = array(
      array(
        'data' => t('There are no registration types yet. <a href="@link">Add a Registration Type</a>', array('@link' => url('admin/structure/registration/types/add'))),
        'colspan' => 2,
      ),
    );
  }
  
  return theme('table', array('header' => $header, 'rows' => $rows));
}

/**
 * Themes a specific registration type row.
 */
function theme_registration_types($variables) {
  $type = $variables['type'];

  $output = check_plain($type->name);
  $output .= ' <small> (Machine name: ' . check_plain($type->type) . ')</small>';
  $output .= '<div class="description">' . filter_xss_admin($type->description) . '</div>';

  return $output;
}

/**
 * Registration entity edit/delete form title callback.
 */
function registration_admin_form_title($type, $action, $bundle = NULL) {
  $mtype = registration_type_load($type);
  switch ($action) {
    case 'Status':
      return 'Set Status for ' . $type . ':' . $bundle;
    case 'Delete':
      return 'Delete type ' . $mtype->name;
    case 'Edit':
      return 'Edit type ' . $mtype->name;
  }
}

/**
 * Implements hook_menu_alter().
 *
 * Set all manage field and display links to inline context so they don't show
 * up on the Types page.
 */
function registration_menu_alter(&$items) {
  foreach (registration_entity_types() as $type => $info) {
    $items['admin/structure/registration/types/' . $type . '/manage/fields']['context'] = MENU_CONTEXT_INLINE;
    $items['admin/structure/registration/types/' . $type . '/manage/display']['context'] = MENU_CONTEXT_INLINE;
  }
}

/**
 * Entity registration status form callback.
 */
function registration_status_form($form, $form_state, $type, $bundle) {
  $form = array();

  $form['type'] = array(
    '#type' => 'hidden',
    '#value' => $type . ':' . $bundle,
  );

  $form['status'] = array(
    '#type' => 'radios',
    '#title' => t('Status'),
    '#default_value' => variable_get('registration_' . $type . ':' . $bundle . '_status', 0),
    '#options' => array('Disabled', 'Enabled'),
  );
  
  $form['registration_entity'] = array(
    '#type' => 'select',
    '#title' => t('Registration Type'),
    '#default_value' => variable_get('registration_' . $type . ':' . $bundle . '_bundle', ''),
    '#options' => registration_bundle_options(),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Save Settings',
  );

  return $form;
}

/**
 * Entity registration status submit handler.
 */
function registration_status_form_submit($form, &$form_state) {
  $type = $form_state['values']['type'];
  variable_set('registration_' . $type . '_bundle', $form_state['values']['registration_entity']);
  variable_set('registration_' . $type . '_status', $form_state['values']['status']);
  drupal_set_message(t('Registration settings updated for @type.', array('@type' => $type)));
  drupal_goto('admin/structure/registration');
}

/**
 * Callback to get options list of registration bundles.
 */
function registration_bundle_options() {
  $options = array('' => 'Select a Bundle');
  foreach (registration_entity_types() as $type => $info) {
    $options[$type] = $info->name;
  }
  return $options;
}

/**
 * Implements hook_menu().
 */
function registration_menu() {
  $items['admin/structure/registration'] = array(
    'title' => 'Registration',
    'description' => 'Manage Registration settings and types',
    'access arguments' => array('administer registration'),
    'page callback' => 'registration_admin_page',
  );
  $items['admin/structure/registration/status/%/%'] = array(
    'title' => 'Enable Registrations',
    'title callback' => 'registration_admin_form_title',
    'title arguments' => array(4, 'Status', 5),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('registration_status_form', 4, 5),
    'access arguments' => array('administer registration'),
  );
  $items['admin/structure/registration/settings'] = array(
    'title' => 'Settings',
    'description' => 'Manage Registration settings and types',
    'access arguments' => array('administer registration'),
    'page callback' => 'registration_admin_page',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/structure/registration/types'] = array(
    'title' => 'Types',
    'description' => 'Manage Registration Types',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'registration_types_page',
    'access arguments' => array('administer registration'),
  );
  $items['admin/structure/registration/types/add'] = array(
    'title' => 'Add a Registration Type',
    'type' => MENU_LOCAL_ACTION,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('registration_type_form'),
    'access arguments' => array('administer registration'),
  );
  $items['admin/structure/registration/types/%/edit'] = array(
    'title' => 'edit',
    'title callback' => 'registration_admin_form_title',
    'title arguments' => array(4, 'Edit'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('registration_type_form', 4),
    'access arguments' => array('administer registration'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/structure/registration/types/%/delete'] = array(
    'title' => 'delete',
    'title callback' => 'registration_admin_form_title',
    'title arguments' => array(4, 'Delete'),
    'page callback' => 'registration_delete_type',
    'page arguments' => array(4),
    'access arguments' => array('administer registration'),
    'type' => MENU_CALLBACK,
  );
  $items['register/%/%/%'] = array(
    'title callback' => 'registration_register_entity_title',
    'title arguments' => array(1, 2, 3),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('registration_register_entity_form', 1, 2, 3),
    'access arguments' => array('add registration'),
  );
  $items['registration/%registration'] = array(
    'title callback' => 'registration_page_title',
    'title arguments' => array(1),
    'page callback' => 'registration_page_view',
    'page arguments' => array(1),
    'access arguments' => array('view registration'),
  );
  $items['registration/%registration/view'] = array(
    'title' => 'View',
    'page callback' => 'registration_page_view',
    'page arguments' => array(1),
    'access arguments' => array('view registration'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['registration/%registration/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('registration_form', 1),
    'access arguments' => array('administer registration'),
    'file' => 'includes/registration.forms.inc',
    'weight' => 10,
    'type' => MENU_LOCAL_TASK,
  );
  $items['registration/%registration/delete'] = array(
    'title' => 'Delete Registration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('registration_delete_confirm', 1),
    'access arguments' => array('administer registration'),
    'file' => 'includes/registration.forms.inc',
  );

  // node local tasks
  $items['node/%node/register'] = array(
    'title' => 'Register',
    'page callback' => 'registration_register_page',
    'page arguments' => array(1),
    'access callback' => 'registration_register_page_access',
    'access arguments' => array(1),
    'file' => 'includes/registration.forms.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['node/%node/registrations'] = array(
    'title' => 'Manage Registrations',
    'page callback' => 'registration_registrations_page',
    'page arguments' => array(1),
    'access callback' => 'registration_administer_registrations_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );
  $items['node/%node/registrations/list'] = array(
    'title' => 'Registrations',
    'page callback' => 'registration_registrations_page',
    'page arguments' => array(1),
    'access callback' => 'registration_administer_registrations_access',
    'access arguments' => array(1),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['node/%node/registrations/settings'] = array(
    'title' => 'Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('registration_registrations_settings_form', 1),
    'access callback' => 'registration_administer_registrations_access',
    'access arguments' => array(1),
    'file' => 'includes/registration.forms.inc',
    'weight' => 9,
    'type' => MENU_LOCAL_TASK,
  );
  $items['node/%node/registrations/broadcast'] = array(
    'title' => 'Email Registrants',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('registration_registrations_broadcast_form', 1),
    'access callback' => 'registration_administer_registrations_access',
    'access arguments' => array(1),
    'file' => 'includes/registration.forms.inc',
    'weight' => 10,
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function registration_permission() {
  $perms = array(
    'administer registration' => array(
      'title' => t('Administer registration'),
      'description' => t('Perform administration tasks for Registrations.'),
      'restrict access' => TRUE,
    ),
    'view any registration' => array(
      'title' => t('View any registration'),
    ),
    'add any registration' => array(
      'title' => t('Add any registration'),
    ),
  );

  foreach (registration_entity_types() as $type => $info) {
    $perms['create ' . $type . ' registration'] = array(
      'title' => t('Create <em> ') . $info->name . t('</em> registrations'),
    );
    $perms['edit ' . $type . ' registration'] = array(
      'title' => t('Edit <em> ') . $info->namee . t('</em> registrations'),
    );
    $perms['delete ' . $type . ' registration'] = array(
      'title' => t('Delete <em> ') . $info->name . t('</em> registrations'),
    );
    $perms['view ' . $type . ' registration'] = array(
      'title' => t('View <em> ') . $info->name . t('</em> registrations'),
    );
  }

  return $perms;
}

/**
 * Implements hook_entity_view_alter().
 */
function registration_entity_view_alter(&$build, $type) {
  $types_to_alter = array();
  $types_to_alter_query = db_select('variable', 'v')->fields('v')->condition('name', 'registration_%_bundle', 'LIKE')->execute();
  foreach ($types_to_alter_query as $row) {
    $mtype = $row->name;
    $mtype = substr($mtype, 13);
    $mtype = substr($mtype, 0, -7);
    $types_to_alter[] = $mtype;
  }
  if (in_array($type . ':' . $build['#bundle'], $types_to_alter)) {
    // the type is in the types of entities to alter for registrations
    $build['registration_register_form'] = drupal_get_form('registration_register_form', $type, $build['#bundle'], $build['#node']->nid);
  }
}

function registration_check_email_registered($email, $entity_type, $entity_bundle, $entity_id) {
  return TRUE;
}

/**
<<<<<<< HEAD
 * Register button form callback.
 *
 * Shows a Register button for a registration enabled entity.
 *
 * If the user is already registered for this item, we instead show text to the
 * user that they are already registered.
=======
 * Form builder for adding a Register button to an entity.
>>>>>>> fe11aee36658d556644fcef231963318ecae428d
 */
function registration_register_form($form, &$form_state, $type, $bundle, $eid) {
  global $user;
  $form = array();
  if ($user->uid != 0 && registration_check_email_registered($user->mail, $type, $bundle, $eid)) {
    return array(
      'already' => array(
        '#type' => 'markup',
        '#markup' => '<small>* ' . t('You are already registered for this item.') . ' *</small>',
      ),
    );
  }
  $form['eid'] = array(
    '#type' => 'hidden',
    '#value' => $eid,
  );
  $form['etype'] = array(
    '#type' => 'hidden',
    '#value' => $type,
  );
  $form['bundle'] = array(
    '#type' => 'hidden',
    '#value' => $bundle,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Register',
  );
  return $form;
}

/**
<<<<<<< HEAD
 * Register button form submit.
 *
 * Loads up the complete registration form for the entity.
=======
 * Register button form submit callback.
>>>>>>> fe11aee36658d556644fcef231963318ecae428d
 */
function registration_register_form_submit($form, &$form_state) {
  drupal_goto('register/' . $form_state['values']['etype'] . '/' . $form_state['values']['bundle'] . '/' . $form_state['values']['eid']);
}

/**
<<<<<<< HEAD
 * Registration form page title callback.
 */
function registration_register_entity_title($type, $bundle, $entityid) {
  $entity = entity_load($type, array($entityid));
  return t('Register for ') . $entity[$entityid]->title;
}

/**
 * Registration form callback.
=======
 * Form builder for registering for an entity. Adds bundle's fields to the form.
>>>>>>> fe11aee36658d556644fcef231963318ecae428d
 */
function registration_register_entity_form($form, &$form_state, $type, $bundle, $entityid) {
  $entity = variable_get('registration_' . $type . ':' . $bundle . '_bundle', FALSE);
  $status = (int) variable_get('registration_' . $type . ':' . $bundle . '_status', 0);
  $form = array();
  $form['entity_type'] = array(
    '#type' => 'hidden',
    '#value' => $type,
  );
  $form['entity_bundle'] = array(
    '#type' => 'hidden',
    '#value' => $bundle,
  );
  $form['entity_id'] = array(
    '#type' => 'hidden',
    '#value' => $entityid,
  );
  if ($status == 0) {
    $form += array(
      'invalid' => array(
        '#type' => 'markup',
        '#markup' => t('This item is not accepting registrations at this time.'),
      ),
      'actions' => array(
        '#type' => 'actions',
        'goback' => array(
          '#type' => 'button',
          '#value' => t('Go Back'),
        ),
      ),
    );
    return $form;
  }
  if (is_string($entity)) {
    $etype = $entity;
<<<<<<< HEAD
    $entity = entity_get_controller('registration')->create(array('type' => $entity));
    $entity->entity_type = $type;
    $entity->entity_bundle = $bundle;
    $entity->eid = $entityid;
    $form['registration'] = array(
      '#type' => 'fieldset',
      '#title' => 'Registration Information',
    );
    $form['registration']['entity'] = array(
      '#type' => 'value',
      '#value' => $entity,
    );
    field_attach_form('registration', $entity, $form['registration'], $form_state);
    $form['actions'] = array(
      '#type' => 'actions',
      'cancel' => array(
        '#type' => 'button',
        '#value' => t('Cancel'),
      ),
      'submit' => array(
        '#type' => 'submit',
        '#value' => t('Submit'),
      ),
    );
=======
    $entity = entity_create('registration', array('type' => $entity));
    field_attach_form($etype, $entity, $form, $form_state);
>>>>>>> fe11aee36658d556644fcef231963318ecae428d
    return $form;
  }
}

/**
 * Registration form validation callback.
 */
function registration_register_entity_form_validate($form, &$form_state) {
  $entityid = $form_state['values']['entity_id'];
  $entitytype = $form_state['values']['entity_type'];
  $entitybundle = $form_state['values']['entity_bundle'];
  $registration = $form_state['values']['entity'];
  field_attach_form_validate('registration', $registration, $form, $form_state);
}

/**
 * Registration form submit callback.
 */
function registration_register_entity_form_submit($form, &$form_state) {
  global $user;
  $entityid = $form_state['values']['entity_id'];
  $entitytype = $form_state['values']['entity_type'];
  $entitybundle = $form_state['values']['entity_bundle'];
  $registration = $form_state['values']['entity'];
  $registration->created = REQUEST_TIME;
  $registration->updated = REQUEST_TIME;
  $registration->user_uid = $user->uid;
  $registration->author_uid = $user->uid;
  $registration->status = 1;
  $registration->save();
  field_attach_submit('registration', $registration, $form, $form_state);
  drupal_set_message(t('Your registration has been received.'));
  drupal_goto($entitytype . '/' . $entityid);
}

/**
 * Landing page for managing the structure of registrations.
 */
function registration_admin_page() {
  $rows = array();
  $entities = entity_get_info();
  foreach ($entities as $type => $data) {
    if (!empty($data['bundles']) && $type != 'registration') {
      $rows[] = array(
        array(
          'data' => '<b>' . $data['label'] . '</b>',
          'colspan' => 2,
        ),
      );
      foreach ($data['bundles'] as $bundle => $bundle_data) {
        $link = $bundle_data['label'];
        $status = variable_get('registration_' . $type . ':' . $bundle . '_status', 0);
        $usingtype = variable_get('registration_' . $type . ':' . $bundle . '_bundle', '');
        $status = ($status ? 'Enabled' : 'Disabled');
        $status = l($status, 'admin/structure/registration/status/' . $type . '/' . $bundle) . ($status == 'Enabled' ? ' <small>(' . $usingtype . ')</small>' : '');
        if (!empty($bundle_data['admin'])) {
          if (!empty($bundle_data['admin']['real path'])) {
            $link = l($bundle_data['label'], $bundle_data['admin']['real path']);
          }
          else {
            $link = l($bundle_data['label'], $bundle_data['admin']['path']);
          }
        }
        $rows[] = array($link, $status);
      }
    }
  }

  $table = array(
    'header' => array(t('Entity Type'), t('Registration Status')),
    'rows' => $rows,
  );
  $out = theme('table', $table);

  return $out;
}

/**
 * Page for viewing a single registraiton.
 */
function registration_page_view($registration, $view_mode = 'full') {
  return entity_build_content('registration', $registration, $view_mode);
}

/**
 * Page title callback.
 */
function registration_page_title($registration) {
  // use the node title in the registration page title
  if ($node = node_load($registration->nid)) {
    return t('Registration for @title', array('@title' => $node->title));
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 * 	 Add registration options to node type form.
 */
function registration_form_node_type_form_alter(&$form, &$form_state) {
  $type = $form['#node_type']->type;

  $form['registration'] = array(
    '#type' => 'fieldset',
    '#title' => t('Registration settings'),
    '#group' => 'additional_settings',
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $form['registration']['registration_node_status'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable registrations for this content type'),
    '#default_value' => variable_get('registration_node_status_' . $type, 0),
    '#description' => t('If enabled, users will be allowed to register for this 
			content type unless an administrator disbles registrations on specific 
			posts.'),
  );
}

/**
 * Implements hook_node_type_delete().
 */
function registration_node_type_delete($info) {
  variable_del('registration_node_status' . $info->type);
}

/**
 * Access callback for registration_register_page().
 */
function registration_register_page_access($node) {
  $ret = FALSE;
  if (variable_get('registration_node_status_' . $node->type, 0)) {
    if (user_access('administer registration') || user_access('add registration')) {
      $settings = registration_node_settings($node->nid);
      if ($settings['status']) {
        $ret = TRUE;
      }
    }
  }

  return $ret;
}

/**
 * Access callback for registration_registrations_page().
 */
function registration_administer_registrations_access($node) {
  $ret = FALSE;
  if (variable_get('registration_node_status_' . $node->type, 0)) {
    if (user_access('administer registration')) {
      $ret = TRUE;
    }
  }

  return $ret;
}

/**
 * Page callback for adding a registration.
 */
function registration_register_page($node) {
  if (registration_has_room($node->nid)) {
    $registration = entity_get_controller('registration')->create(array('type' => 'registration'));
    $registration->nid = $node->nid;
    return drupal_get_form('registration_form', $registration);
  }
  else {
    return t('Sorry, %name is sold out', array('%name' => $node->title));
  }
}

/**
 * Page callback for viewing registrations
 */
function registration_registrations_page($node) {
	$header = array(
		array('data' => t('id'), 'field' => 'registration_id', 'type' => 'property', 
				'specifier' => 'registration_id'),
		array('data' => t('Email'), 'field' => 'mail', 'type' => 'property', 
				'specifier' => 'mail'),
		array('data' => t('Created By'), 'field' => 'author_uid', 
				'type' => 'property', 'specifier' => 'author_uid'),
		array('data' => t('Count'), 'field' => 'count', 'type' => 'property', 
				'specifier' => 'count'),
		array('data' => t('Created'), 'field' => 'created', 'sort' => 'desc', 
				'type' => 'property', 'specifier' => 'created'),
		array('data' => t('Actions')),
	);
	
  $query = new EntityFieldQuery;
  $result = $query
		->entityCondition('entity_type', 'registration')
		->propertyCondition('nid', $node->nid)
		->pager(20)
		->tableSort($header)
		->execute();
		
  if (!empty($result['registration'])) {
    $registrations = registration_load_multiple(array_keys($result['registration']));

    $rows = array();
    foreach ($registrations as $registration) {
      $author = '';
      if ($registration->author_uid) {
        $author = user_load($registration->author_uid);
        $author = l($author->name, 'user/' . $author->uid);
      }
			$actions = array(
				l('View', 'registration/' . $registration->registration_id),
				l('Edit', 'registration/' . $registration->registration_id . '/edit'),
				l('Delete', 'registration/' . $registration->registration_id . '/delete'),
			);
      $rows[] = array(
        l($registration->registration_id, 'registration/' . $registration->registration_id),
        l($registration->mail, 'mailto:' . $registration->mail),
        $author,
        $registration->count,
        format_date($registration->created),
				implode(' | ', $actions)
      );
    }

		$settings = registration_node_settings($node->nid);
				
    $table = array(
      'header' => $header,
      'rows' => $rows,
			'caption' => t('List of registrations for %title. !count of !capacity slots are filled.', 
				array(
					'%title' => $node->title,
 					'!count' => '<strong>' . registration_event_count($node->nid) . '</strong>', 
					'!capacity' => '<strong>' . $settings['capacity'] . '</strong>'
				))
    );

    $out = theme('table', $table) . theme('pager');
  }
  else {
    $out = t('There are no registratrants for %name', 
				array('%name' => $node->title));
  }

  return $out;
}

/**
 * Helper to determine if a node has any slots left.
 */
function registration_has_room($nid) {
  $ret      = TRUE;
  $settings = registration_node_settings($nid);
  $capacity = $settings['capacity'];
  if ($capacity) {
    $count = registration_event_count($nid);
    if (($capacity - $count) < 1) {
      $ret = FALSE;
    }
  }

  return $ret;
}

/**
 * Return the number of registrations for a given node.
 *
 * @param int $nid
 *
 * @return int
 */
function registration_event_count($nid) {
	$count = &drupal_static(__FUNCTION__, FALSE);
	if (!$count) {
	  $count = db_query("SELECT sum(count) FROM {registration} WHERE nid = :nid",
	    array(':nid' => $nid)
	  )->fetchField();		
	}
  return $count;
}

/**
 * Implements hook_entity_delete().
 */
function registration_entity_delete($entity, $type) {
  $data = entity_extract_ids($type, $entity);
  db_delete('registration')->condition('eid', $data[0]);
}

/**
 * Implements hook_node_delete().
 *
 * Deletes registrations and settings for this node.
 */
function registration_node_delete($node) {
  db_delete('registration')->condition('nid', $node->nid)->execute();
  db_delete('registration_node')->condition('nid', $node->nid)->execute();
}

/**
 * Return all registration settings for a given node.
 *
 * @param string $nid
 *
 * @return array
 */
function registration_node_settings($nid) {
  // @TODO: Add static variable handling.
  $result = db_select('registration_node', 'rn')
		->fields('rn')
		->condition('nid', $nid, '=')
		->execute()
		->fetchAssoc();

	if ($result) {
		$result['settings'] = unserialize($result['settings']);		
	}
	
  return $result;
}

/**
 * Implements hook_theme().
 */
function registration_theme() {
  return array(
    'registration' => array(
      'arguments' => array('registration' => NULL),
    ),
    'registration_types' => array(
      'arguments' => array('types' => NULL),
    ),
  );
}

/**
 * Theme handler for registrations.
 *
 * @param array $variables
 * 	 Contains a complete registration object.
 */
function theme_registration($variables) {
  $registration = $variables['registration'];
  $output = '<div><label>' . t('Email') . '</label>' . $registration->mail . '</div>';
  if ($node = node_load($registration->nid)) {
    $output .= '<div><label>' . $node->type . "</label>" . l($node->title, 'node/' . $registration->nid) . '</div>';
  }

  $output .= '<div><label>' . t('Count') . '</label>' . $registration->count . '</div>';
  $output .= '<div><label>' . t('Created') . '</label>' . format_date($registration->created) . '</div>';

  return $output;
}

/**
 * Implements hook_mail().
 */
function registration_mail($key, &$message, $params) {
  $subject = $params['subject'];
  $body = $params['message'];
  $message['subject'] .= str_replace(array("\r", "\n"), '', $subject);
  $message['body'][] = drupal_html_to_text($body);
}

/**
 * Send an email to all registrations for a given node.
 *
 * @param object $node
 */
function registration_send_broadcast($node, $subject, $message) {
  global $language;
	
	// grab registration node settings
	$settings = registration_node_settings($node->nid);
	$from = $settings['settings']['from_address'];
	
  // grab all registrations
  $query = new EntityFieldQuery();
  $entities = $query
		->entityCondition('entity_type', 'registration')
		->entityCondition('bundle', 'registration')
		->propertyCondition('nid', $node->nid)
		->execute();

  if (!empty($entities)) {
    $recipients = array();

    $params = array(
      'subject' => $subject,
      'message' => $message,
    );

    // load registrations and build an array of recipients
    $registrations = registration_load_multiple(
      array_keys($entities['registration'])
    );

    // send the email to each registrant and communicate results
		$success_count = 0;
    foreach ($registrations as $registration) {
      $recipients[] = $registration->mail;
	    $result = drupal_mail('registration', 'broadcast',
	      $registration->mail, $language, $params, $from
	    );
    	if ($result['result']) {
				$success_count++;
			}
			else {
				watchdog('registration', 'Failed to send registration broadcast email to %email.',
					array('%email' => $registration->mail), 'WATCHDOG_ERROR'
				);
			}
    }

    if ($success_count) {
      drupal_set_message(t('Registration broadcast sent to @count registrants.',
        array('@count' => $success_count)
      ));
			watchdog('registration', 'Registration broadcast sent to @count registrants.',
				array('@count' => $success_count)
			);
    }
  }
  else {
    drupal_set_message(
      t('There are no participants registered for this %type.', 
					array('%type' => $node->type)),
      $type = 'warning'
    );
  }
}

/**
 * Update a node's registration settings.
 *
 * @param int $nid 
 * @param array $settings
 * 		Associative array containing additional node registration settings.
 *    Keys are status, capacity, send_reminder, reminder_date, reminder_template
 *    and an associatve array of additional settings.
 */
function registration_update_node_settings($nid, $settings) {
	// insert or udpate registration node settings
	db_merge('registration_node')
    ->key(array('nid' => $nid))
	  ->fields($settings)
	  ->execute();

  drupal_set_message(t('Registration settings have been saved.'));	
}

/**
 * Implements hook_cron().
 */
function registration_cron_nope() {
	//@TODO: need to have a sensible batch limit, passed in as a limit param
	
	// grab all registrations that have reminders set for this day
	$results = db_select('registration_node', 'rn')
		->fields('rn')
		->condition('send_reminder', 1)
		->condition('reminder_date', date('Y-m-d 00:00:00'))
		->range(0, 10)
		->execute()
		->fetchAllAssoc('nid');

	foreach ($results as $result) {
		$node = node_load($result->nid);
		$message = $result->reminder_template;
		if (module_exists('token')) {
			$message = token_replace($message, array('node' => $node));
		}
		$subject = 'Reminder for ' . $node->title;
		registration_send_broadcast($node, $subject, $message);
		
		// set reminder flag to off
		db_update('registration_node')
			->fields(array('send_reminder' => 0))
			->condition('nid', $node->nid)
			->execute();
	}
}
