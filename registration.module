<?php

/**
 * @file
 * Module file for registrations.
 */

module_load_include('inc', 'registration', 'includes/registration.entity');

function registration_type_form($type = NULL) {
  $name = '';
  $machine = '';
  $desc = '';
  $op = 'new';
  if (is_string($type)) {
    $type = registration_type_load($type);
  }
  if (!empty($type)) {
    $name = $type->name;
    $machine = $type->type;
    $desc = $type->description;
    $op = 'edit';
  }

  $form = array();

  $form['pop'] = array(
    '#type' => 'hidden',
    '#default_value' => $op,
    '#value' => $op,
  );
  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => 'Name',
    '#default_value' => $name,
  );
  $form['bundle'] = array(
    '#type' => 'machine_name',
    '#title' => 'Machine name',
    '#machine_name' => array(
      'exists' => 'registration_entity_type_exists',
    ),
    '#default_value' => $machine,
  );
  $form['description'] = array(
    '#type' => 'textarea',
    '#title' => 'Description',
    '#default_value' => $desc,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
  );

  return $form;
}

function registration_type_form_submit($form, $form_state) {
  $op = $form_state['values']['pop'];
  $msg = '';
  $record = array(
    'name' => $form_state['values']['name'],
    'type' => $form_state['values']['bundle'],
    'description' => $form_state['values']['description'],
    'created' => REQUEST_TIME,
    'changed' => REQUEST_TIME,
  );
  switch ($op) {
    case 'new':
      drupal_write_record('registration_type', $record);
      $msg = t(' created.');
      break;
    case 'edit':
      drupal_write_record('registration_type', $record, array('type'));
      $msg = t(' updated.');
      break;
  }
  registration_entity_types_reset();
  drupal_set_message(t('Registration entity ') . '<em>' . $record['type'] . '</em>' . t(' has been ') . $msg);
}

function registration_entity_type_exists($type) {
  $types = registration_entity_types();
  if (array_key_exists($type, $types)) {
    return TRUE;
  }
  return FALSE;
}

function registration_edit_type($type) {
  return drupal_get_form('registration_type_form', $type);
}

function registration_delete_type($type) {
  return "Delete $type";
}

function registration_types_page() {
  $header = array(t('Name'), t('Operations'));
  $rows = array();
  foreach (registration_entity_types() as $type => $info) {
    $links = array(
      'edit' => array(
        'title' => 'edit',
        'href' => 'admin/structure/registration/types/' . $type . '/edit',
      ),
      'manage fields' => array(
        'title' => 'manage fields',
        'href' => 'admin/structure/registration/types/' . $type . '/manage/fields',
      ),
      'manage display' => array(
        'title' => 'manage display',
        'href' => 'admin/structure/registration/types/' . $type . '/manage/display',
      ),
      'delete' => array(
        'title' => 'delete',
        'href' => 'admin/structure/registration/types/' . $type . '/delete',
      ),
    );
    $rows[] = array(
      theme('registration_types', array('type' => $info)),
      theme('links', array('links' => $links, 'attributes' => array('class' => 'links inline operations'))),
    );
  }
  
  if (empty($rows)) {
    $rows[] = array(
      array(
        'data' => t('There are no registration types yet. <a href="@link">Add a Registration Type</a>', array('@link' => url('admin/structure/registration/types/add'))),
        'colspan' => 2,
      ),
    );
  }
  
  return theme('table', array('header' => $header, 'rows' => $rows));
}

function theme_registration_types($variables) {
  $type = $variables['type'];

  $output = check_plain($type->name);
  $output .= ' <small> (Machine name: ' . check_plain($type->type) . ')</small>';
  $output .= '<div class="description">' . filter_xss_admin($type->description) . '</div>';

  return $output;
}

function registration_menu_alter(&$items) {
  foreach (registration_entity_types() as $type => $info) {
    $items['admin/structure/registration/types/' . $type . '/manage/fields']['context'] = MENU_CONTEXT_INLINE;
    $items['admin/structure/registration/types/' . $type . '/manage/display']['context'] = MENU_CONTEXT_INLINE;
  }
}

/**
 * Implements hook_menu().
 */
function registration_menu() {
  $items['admin/structure/registration'] = array(
    'title' => 'Registration',
    'description' => 'Manage Registration settings and types',
    'access arguments' => array('administer registration'),
    'page callback' => 'registration_admin_page',
  );
  $items['admin/structure/registration/settings'] = array(
    'title' => 'Settings',
    'description' => 'Manage Registration settings and types',
    'access arguments' => array('administer registration'),
    'page callback' => 'registration_admin_page',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/structure/registration/types'] = array(
    'title' => 'Types',
    'description' => 'Manage Registration Types',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'registration_types_page',
    'access arguments' => array('administer registration'),
  );
  $items['admin/structure/registration/types/add'] = array(
    'title' => 'Add a Registration Type',
    'type' => MENU_LOCAL_ACTION,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('registration_type_form'),
    'access arguments' => array('administer registration'),
  );
  $items['admin/structure/registration/types/%/edit'] = array(
    'title' => 'edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('registration_type_form', 4),
    'access arguments' => array('administer registration'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/structure/registration/types/%/delete'] = array(
    'title' => 'delete',
    'page callback' => 'registration_delete_type',
    'page arguments' => array(4),
    'access arguments' => array('administer registration'),
    'type' => MENU_CALLBACK,
  );
  $items['registration/%registration'] = array(
    'title callback' => 'registration_page_title',
    'title arguments' => array(1),
    'page callback' => 'registration_page_view',
    'page arguments' => array(1),
    'access arguments' => array('view registration'),
  );
  $items['registration/%registration/view'] = array(
    'title' => 'View',
    'page callback' => 'registration_page_view',
    'page arguments' => array(1),
    'access arguments' => array('view registration'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['registration/%registration/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('registration_form', 1),
    'access arguments' => array('administer registration'),
    'file' => 'includes/registration.forms.inc',
    'weight' => 10,
    'type' => MENU_LOCAL_TASK,
  );
  $items['registration/%registration/delete'] = array(
    'title' => 'Delete Registration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('registration_delete_confirm', 1),
    'access arguments' => array('administer registration'),
    'file' => 'includes/registration.forms.inc',
  );

  // node local tasks
  $items['node/%node/register'] = array(
    'title' => 'Register',
    'page callback' => 'registration_register_page',
    'page arguments' => array(1),
    'access callback' => 'registration_register_page_access',
    'access arguments' => array(1),
    'file' => 'includes/registration.forms.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['node/%node/registrations'] = array(
    'title' => 'Manage Registrations',
    'page callback' => 'registration_registrations_page',
    'page arguments' => array(1),
    'access callback' => 'registration_administer_registrations_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );
  $items['node/%node/registrations/list'] = array(
    'title' => 'Registrations',
    'page callback' => 'registration_registrations_page',
    'page arguments' => array(1),
    'access callback' => 'registration_administer_registrations_access',
    'access arguments' => array(1),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['node/%node/registrations/settings'] = array(
    'title' => 'Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('registration_registrations_settings_form', 1),
    'access callback' => 'registration_administer_registrations_access',
    'access arguments' => array(1),
    'file' => 'includes/registration.forms.inc',
    'weight' => 9,
    'type' => MENU_LOCAL_TASK,
  );
  $items['node/%node/registrations/broadcast'] = array(
    'title' => 'Email Registrants',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('registration_registrations_broadcast_form', 1),
    'access callback' => 'registration_administer_registrations_access',
    'access arguments' => array(1),
    'file' => 'includes/registration.forms.inc',
    'weight' => 10,
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function registration_permission() {
  return array(
    'administer registration' => array(
      'title' => t('Administer registration'),
      'description' => t('Perform administration tasks for Registrations.'),
      'restrict access' => TRUE,
    ),
    'view registration' => array(
      'title' => t('View registrations'),
    ),
    'add registration' => array(
      'title' => t('Add registrations'),
    ),
  );
}

/**
 * Landing page for managing the structure of registrations.
 */
function registration_admin_page() {
  $rows = array();
  foreach (node_type_get_names() as $type => $name) {
    $rows[] = array(
      l($name, 'admin/structure/types/manage/' . $type),
      (variable_get('registration_node_status_' . $type, 0)) ? t('Enabled') :
      t('Disabled'),
    );
  }

  $table = array(
    'header' => array(t('Content type'), t('Registration status')),
    'rows' => $rows,
  );
  $out = theme('table', $table);

  return $out;
}

/**
 * Page for viewing a single registraiton.
 */
function registration_page_view($registration, $view_mode = 'full') {
  return entity_build_content('registration', $registration, $view_mode);
}

/**
 * Page title callback.
 */
function registration_page_title($registration) {
  // use the node title in the registration page title
  if ($node = node_load($registration->nid)) {
    return t('Registration for @title', array('@title' => $node->title));
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 * 	 Add registration options to node type form.
 */
function registration_form_node_type_form_alter(&$form, &$form_state) {
  $type = $form['#node_type']->type;

  $form['registration'] = array(
    '#type' => 'fieldset',
    '#title' => t('Registration settings'),
    '#group' => 'additional_settings',
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $form['registration']['registration_node_status'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable registrations for this content type'),
    '#default_value' => variable_get('registration_node_status_' . $type, 0),
    '#description' => t('If enabled, users will be allowed to register for this 
			content type unless an administrator disbles registrations on specific 
			posts.'),
  );
}

/**
 * Implements hook_node_type_delete().
 */
function registration_node_type_delete($info) {
  variable_del('registration_node_status' . $info->type);
}

/**
 * Access callback for registration_register_page().
 */
function registration_register_page_access($node) {
  $ret = FALSE;
  if (variable_get('registration_node_status_' . $node->type, 0)) {
    if (user_access('administer registration') || user_access('add registration')) {
      $settings = registration_node_settings($node->nid);
      if ($settings['status']) {
        $ret = TRUE;
      }
    }
  }

  return $ret;
}

/**
 * Access callback for registration_registrations_page().
 */
function registration_administer_registrations_access($node) {
  $ret = FALSE;
  if (variable_get('registration_node_status_' . $node->type, 0)) {
    if (user_access('administer mkc_registration')) {
      $ret = TRUE;
    }
  }

  return $ret;
}

/**
 * Page callback for adding a registration.
 */
function registration_register_page($node) {
  if (registration_has_room($node->nid)) {
    $registration = entity_get_controller('registration')->create(array('type' => 'registration'));
    $registration->nid = $node->nid;
    return drupal_get_form('registration_form', $registration);
  }
  else {
    return t('Sorry, %name is sold out', array('%name' => $node->title));
  }
}

/**
 * Page callback for viewing registrations
 */
function registration_registrations_page($node) {
  $query = new EntityFieldQuery;
  $query->entityCondition('entity_type', 'registration')->propertyCondition('nid', $node->nid);
  $result = $query->execute();

  if (!empty($result['registration'])) {
    $registrations = registration_load_multiple(array_keys($result['registration']));

    $rows = array();
    foreach ($registrations as $registration) {
      $author = '';
      if ($registration->author_uid) {
        $author = user_load($registration->author_uid);
        $author = l($author->name, 'user/' . $author->uid);
      }
			$actions = array(
				l('View', 'registration/' . $registration->registration_id),
				l('Edit', 'registration/' . $registration->registration_id . '/edit'),
				l('Delete', 'registration/' . $registration->registration_id . '/delete'),
			);
      $rows[] = array(
        l($registration->registration_id, 'registration/' . $registration->registration_id),
        l($registration->mail, 'mailto:' . $registration->mail),
        $author,
        $registration->count,
        format_date($registration->created),
				implode(' | ', $actions)
      );
    }

    $table = array(
      'header' => array(t('id'), t('Email'), t('Created By'), t('Count'), t('Created'), t('Actions')),
      'rows' => $rows,
    );
    $out = theme('table', $table);
  }
  else {
    $out = t('There are no registratrants for %name', array('%name' => $node->title));
  }

  return $out;
}

/**
 * Helper to determine if a node has any slots left.
 */
function registration_has_room($nid) {
  $ret      = TRUE;
  $settings = registration_node_settings($nid);
  $capacity = $settings['capacity'];
  if ($capacity) {
    $count = registration_event_count($nid);
    if (($capacity - $count) < 1) {
      $ret = FALSE;
    }
  }

  return $ret;
}

/**
 * Return the number of registrations for a given node.
 *
 * @param int $nid
 *
 * @return int
 */
function registration_event_count($nid) {
	// @TODO: Add static variable
  $count = db_query("SELECT sum(nid*count) FROM {registration} WHERE nid = :nid",
    array(':nid' => $nid)
  )->fetchField();
  return $count;
}

/**
 * Implements hook_node_delete().
 *   Delete registrations and settings for this node.
 */
function registration_node_delete($node) {
  db_delete('registration')->condition('nid', $node->nid)->execute();
  db_delete('registration_node')->condition('nid', $node->nid)->execute();
}

/**
 * Return all registration settings for a given node.
 *
 * @param string $nid
 *
 * @return array
 */
function registration_node_settings($nid) {
  // @TODO: Add static variable handling.
  $result = db_select('registration_node', 'rn')
		->fields('rn')
		->condition('nid', $nid, '=')
		->execute()
		->fetchAssoc();

	if ($result) {
		$result['settings'] = unserialize($result['settings']);		
	}
	
  return $result;
}

/**
 * Implements hook_theme().
 */
function registration_theme() {
  return array(
    'registration' => array(
      'arguments' => array('registration' => NULL),
    ),
    'registration_types' => array(
      'arguments' => array('types' => NULL),
    ),
  );
}

/**
 * Theme handler for registrations.
 *
 * @param array $variables
 * 	 Contains a complete registration object.
 */
function theme_registration($variables) {
  $registration = $variables['registration'];
  $output = '<div><label>' . t('Email') . '</label>' . $registration->mail . '</div>';
  if ($node = node_load($registration->nid)) {
    $output .= '<div><label>' . $node->type . "</label>" . l($node->title, 'node/' . $registration->nid) . '</div>';
  }

  $output .= '<div><label>' . t('Count') . '</label>' . $registration->count . '</div>';
  $output .= '<div><label>' . t('Created') . '</label>' . format_date($registration->created) . '</div>';

  return $output;
}

/**
 * Implements hook_mail().
 */
function registration_mail($key, &$message, $params) {
  $subject = $params['subject'];
  $body = $params['message'];
  $message['subject'] .= str_replace(array("\r", "\n"), '', $subject);
  $message['body'][] = drupal_html_to_text($body);
}

/**
 * Send an email to all registrations for a given node.
 *
 * @param object $node
 */
function registration_send_broadcast($node, $subject, $message) {
  global $language;
	
	// grab registration node settings
	$settings = registration_node_settings($node->nid);
	$from = $settings['settings']['from_address'];
	
  // grab all registrations
  $query = new EntityFieldQuery();
  $entities = $query
		->entityCondition('entity_type', 'registration')
		->entityCondition('bundle', 'registration')
		->propertyCondition('nid', $node->nid)
		->execute();

  if (!empty($entities)) {
    $recipients = array();

    // load registrations and build an array of recipients
    $registrations = registration_load_multiple(
      array_keys($entities['registration'])
    );
    foreach ($registrations as $registration) {
      $recipients[] = $registration->mail;
    }

    // send the email and communicate results
    $params = array(
      'subject' => $subject,
      'message' => $message,
    );
    $result = drupal_mail('registration', 'broadcast',
      implode(', ', $recipients), $language, $params, $from
    );
    if ($result['result']) {
      drupal_set_message(t('The message has been sent to @count registrants.',
        array('@count' => count($recipients))
      ));
			watchdog('registration', 'Registration email sent to @count registrants.',
				array('@count' => count($recipients))
			);
    }
    else {
      drupal_set_message(
        t('There was an error sending the message.'),
        $type = 'error'
      );
			watchdog('registration', 'Failed to send registration broadcast email.',
				array(), 'WATCHDOG_ERROR'
			);
    }
  }
  else {
    drupal_set_message(
      t('There are no participants registered for this %type.', array('%type' => $node->type)),
      $type = 'warning'
    );
  }
}

/**
 * Update a node's registration settings.
 *
 * @param int $nid 
 * @param array $settings
 * 		Associative array containing additional node registration settings.
 *    Keys are status, capacity, send_reminder, reminder_date, reminder_template
 *    and an associatve array of additional settings.
 */
function registration_update_node_settings($nid, $settings) {
	// insert or udpate registration node settings
	db_merge('registration_node')
    ->key(array('nid' => $nid))
	  ->fields($settings)
	  ->execute();

  drupal_set_message(t('Registration settings have been saved.'));	
}

/**
 * Implements hook_cron().
 */
function registration_cron_nope() {
	//@TODO: need to have a sensible batch limit, passed in as a limit param
	
	// grab all registrations that have reminders set for this day
	$results = db_select('registration_node', 'rn')
		->fields('rn')
		->condition('send_reminder', 1)
		->condition('reminder_date', date('Y-m-d 00:00:00'))
		->execute()
		->fetchAssoc();

	foreach ($results as $result) {
		$node = node_load($result['nid']);
		$message = $result['message'];
		if (module_exists('token')) {
			$message = token_replace($message, array('node' => $node));
		}
		$subject = 'Reminder for ' . $node->title;
		registration_send_broadcast($node, $subject, $message);
		
		// set reminder flag to off
		db_update('registration_node')
			->fields(array('send_reminder' => 0))
			->condition('nid', $node->nid)
			->execute();
	}
}
