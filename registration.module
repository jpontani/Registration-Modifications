<?php

/**
 * @file
 * Module file for registrations.
 */

module_load_include('inc', 'registration', 'includes/registration.entity');

/**
 * Implements hook_menu_alter().
 *
 * Set all manage field and display links to inline context so they don't show
 * up on the Types page.
 */
function registration_menu_alter(&$items) {
  foreach (registration_entity_types() as $type => $info) {
    $items['admin/structure/registration/types/manage/' . $type . '/fields']['context'] = MENU_CONTEXT_NONE | MENU_CONTEXT_INLINE;
    $items['admin/structure/registration/types/manage/' . $type . '/display']['context'] = MENU_CONTEXT_NONE | MENU_CONTEXT_INLINE;
  }
}

/**
 * Implements hook_menu().
 */
function registration_menu() {
  $items['admin/structure/registration'] = array(
    'title' => 'Registration',
    'description' => 'Manage Registration settings and types',
    'access arguments' => array('administer registration'),
    'page callback' => 'registration_admin_page',
    'file' => 'includes/registration.admin.inc',
  );
  $items['admin/structure/registration/status/%/%'] = array(
    'title' => 'Enable Registrations',
    'title callback' => 'registration_admin_form_title',
    'title arguments' => array(4, 'Status', 5),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('registration_status_form', 4, 5),
    'access arguments' => array('administer registration'),
    'file' => 'includes/registration.admin.inc',
  );
  $items['admin/structure/registration/entities'] = array(
    'title' => 'Entities',
    'description' => 'Manage Registration settings and types',
    'access arguments' => array('administer registration'),
    'page callback' => 'registration_admin_page',
    'file' => 'includes/registration.admin.inc',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );
  $items['admin/structure/registration/types'] = array(
    'title' => 'Types',
    'description' => 'Manage Registration Types',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'registration_types_page',
    'access arguments' => array('administer registration'),
    'file' => 'includes/registration.admin.inc',
    'weight' => 1,
  );
  $items['admin/structure/registration/settings'] = array(
    'title' => 'Default Settings',
    'description' => 'Manage Registration Types',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('registration_default_settings_form'),
    'access arguments' => array('administer registration'),
    'file' => 'includes/registration.admin.inc',
    'weight' => 2,
  );
  $items['admin/structure/registration/types/add'] = array(
    'title' => 'Add a Registration Type',
    'type' => MENU_LOCAL_ACTION,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('registration_type_form'),
    'access arguments' => array('administer registration'),
    'file' => 'includes/registration.admin.inc',
  );
  $items['admin/structure/registration/types/manage/%'] = array(
    'title' => 'Edit Registration Type',
    'title callback' => 'registration_admin_form_title',
    'title arguments' => array(5, 'Edit'),
    'file' => 'includes/registration.admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('registration_type_form', 5),
    'access arguments' => array('administer registration'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/structure/registration/types/%/delete'] = array(
    'title' => 'delete',
    'title callback' => 'registration_admin_form_title',
    'title arguments' => array(4, 'Delete'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('registration_delete_type_form', 4),
    'access arguments' => array('administer registration'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/registration.admin.inc',
  );
  $items['register/%/%/%'] = array(
    'title callback' => 'registration_register_entity_title',
    'title arguments' => array(1, 2, 3),
    'page callback' => 'drupal_get_form',
    'file' => 'includes/registration.forms.inc',
    'page arguments' => array('registration_register_entity_form', 1, 2, 3),
    'access arguments' => array('add registration'),
  );
  $items['registration/%registration'] = array(
    'title callback' => 'registration_page_title',
    'title arguments' => array(1),
    'page callback' => 'registration_page_view',
    'page arguments' => array(1),
    'access arguments' => array('view registration'),
  );
  $items['registration/%registration/view'] = array(
    'title' => 'View',
    'page callback' => 'registration_page_view',
    'page arguments' => array(1),
    'access arguments' => array('view registration'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['registration/%registration/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('registration_form', 1),
    'access arguments' => array('administer registration'),
    'file' => 'includes/registration.forms.inc',
    'weight' => 10,
    'type' => MENU_LOCAL_TASK,
  );
  $items['registration/%registration/delete'] = array(
    'title' => 'Delete Registration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('registration_delete_confirm', 1),
    'access arguments' => array('administer registration'),
    'file' => 'includes/registration.forms.inc',
  );

  // node local tasks
  $items['node/%node/register'] = array(
    'title' => 'Register',
    'page callback' => 'registration_register_page',
    'page arguments' => array(1, 'node'),
    'access callback' => 'registration_register_page_access',
    'access arguments' => array(1),
    'file' => 'includes/registration.forms.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['node/%node/registrations'] = array(
    'title' => 'Manage Registrations',
    'page callback' => 'registration_registrations_page',
    'page arguments' => array(1),
    'access callback' => 'registration_administer_registrations_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );
  $items['node/%node/registrations/list'] = array(
    'title' => 'Registrations',
    'page callback' => 'registration_registrations_page',
    'page arguments' => array(1),
    'access callback' => 'registration_administer_registrations_access',
    'access arguments' => array(1),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['node/%node/registrations/settings'] = array(
    'title' => 'Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('registration_registrations_settings_form', 1, 'node'),
    'access callback' => 'registration_administer_registrations_access',
    'access arguments' => array(1),
    'file' => 'includes/registration.forms.inc',
    'weight' => 9,
    'type' => MENU_LOCAL_TASK,
  );
  $items['node/%node/registrations/broadcast'] = array(
    'title' => 'Email Registrants',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('registration_registrations_broadcast_form', 1),
    'access callback' => 'registration_administer_registrations_access',
    'access arguments' => array(1),
    'file' => 'includes/registration.forms.inc',
    'weight' => 10,
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function registration_permission() {
  $perms = array(
    'administer registration' => array(
      'title' => t('Administer registration'),
      'description' => t('Perform administration tasks for Registrations.'),
      'restrict access' => TRUE,
    ),
    'view any registration' => array(
      'title' => t('View any registration'),
    ),
    'add any registration' => array(
      'title' => t('Add any registration'),
    ),
  );

  foreach (registration_entity_types() as $type => $info) {
    $perms['create ' . $type . ' registration'] = array(
      'title' => t('Create <em>@name</em> registrations', array('@name' => $info->name)),
    );
    $perms['edit ' . $type . ' registration'] = array(
      'title' => t('Edit <em>@name</em> registrations', array('@name' => $info->name)),
    );
    $perms['delete ' . $type . ' registration'] = array(
      'title' => t('Delete <em>@name</em> registrations', array('@name' => $info->name)),
    );
    $perms['view ' . $type . ' registration'] = array(
      'title' => t('View <em>@name</em> registrations', array('@name' => $info->name)),
    );
  }

  return $perms;
}

/**
 * Implements hook_entity_view_alter().
 */
function registration_entity_view_alter(&$build, $type) {
  $types_to_alter = array();
  $types_to_alter_query = db_select('variable', 'v')->fields('v')->condition('name', 'registration_bundle:%', 'LIKE')->execute();
  foreach ($types_to_alter_query as $row) {
    $mtype = $row->name;
    $mtype = substr($mtype, 20);
    $types_to_alter[] = $mtype;
  }
  if (in_array($type . ':_' . $build['#bundle'], $types_to_alter)) {
    // the type is in the types of entities to alter for registrations
    if (!function_exists('registration_register_form')) {
      module_load_include('inc', 'registration', 'includes/registration.forms');
    }
    $build['registration_register_form'] = drupal_get_form('registration_register_form', $type, $build['#bundle'], $build['#node']->nid);
  }
}

function registration_check_email_registered($email, $entity_type, $entity_bundle, $entity_id) {
  return FALSE;
}

/**
 * Page for viewing a single registraiton.
 */
function registration_page_view($registration, $view_mode = 'full') {
  return entity_build_content('registration', $registration, $view_mode);
}

/**
 * Page title callback.
 */
function registration_page_title($registration) {
  $entity = entity_load($registration->entity_type, array($registration->eid));
  $entity = $entity[$registration->eid];
  return t('Registration #@num for @entity', array('@num' => $registration->registration_id, '@entity' => $entity->title));
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add registration options to node type form.
 */
function registration_form_node_type_form_alter(&$form, &$form_state) {
  if (!function_exists('registration_bundle_options')) {
    module_load_include('inc', 'registration', 'includes/registration.admin');
  }
  $type = $form['#node_type']->type;

  $form['registration'] = array(
    '#type' => 'fieldset',
    '#title' => t('Registration settings'),
    '#group' => 'additional_settings',
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['registration']['registration_status:node:'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable registrations for this content type'),
    '#default_value' => variable_get('registration_status:node:_' . $type, 0),
    '#description' => t('If enabled, users will be allowed to register for this
      content type unless an administrator disbles registrations on specific
      posts.'),
  );
  $form['registration']['registration_bundle:node:'] = array(
    '#type' => 'select',
    '#title' => t('Registration Type'),
    '#default_value' => variable_get('registration_bundle:node:_' . $type, ''),
    '#options' => registration_bundle_options(),
  );
}

/**
 * Updates the registration settings for the entity.
 *
 * @param $entity
 *   Fully formed entity object.
 * @param $type
 *   String of the entity type (not bundle).
 */
function registration_entity_submit($entity, $type) {
  $entity_info = entity_get_info($type);
  if (isset($entity->registration_status) && $entity->registration_status == 1) {
    $settings = array(
      'registration_bundle' => $entity->registration_bundle,
      'settings' => serialize(registration_default_settings()),
    );
    $info = array(
      'id' => $entity->$entity_info['entity keys']['id'],
      'type' => $type,
      'bundle' => $entity->type,
    );
    registration_update_entity_settings($info, $settings);
  }
}

/**
 * Implements hook_entity_insert().
 */
function registration_entity_insert($entity, $type) {
  registration_entity_submit($entity, $type);
}

/**
 * Implements hook_entity_update().
 */
function registration_entity_update($entity, $type) {
  registration_entity_submit($entity, $type);
}

/**
 * Implements hook_form_alter().
 */
function registration_form_alter(&$form, &$form_state, $form_id) {
  if (!function_exists('registration_bundle_options')) {
    module_load_include('inc', 'registration', 'includes/registration.admin');
  }
  $node_types = node_type_get_types();
  foreach ($node_types as $type => $info) {
    if ($form_id == $type . '_node_form') {
      $data = entity_extract_ids('node', $form_state['node']);
      $entity_info = array(
        'type' => 'node',
        'bundle' => $data[2],
        'id' => $data[0],
      );
      $form['registration'] = array(
        '#type' => 'fieldset',
        '#title' => t('Registration Settings'),
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
        '#group' => 'additional_settings',
      );
      $form['registration']['registration_status'] = array(
        '#type' => 'checkbox',
        '#title' => t('Enable registrations for this node'),
        '#default_value' => registration_entity_registration_status($entity_info),
        '#description' => t('If enabled, users will be allowed to register for this
          node.'),
      );
      $form['registration']['registration_bundle'] = array(
        '#type' => 'select',
        '#title' => t('Registration Type'),
        '#default_value' => registration_entity_registration_bundle($entity_info),
        '#options' => registration_bundle_options(),
      );
    }
  }
}

/**
 * Returns the number of slots available for the given entity.
 *
 * @param $entity
 *   Associate array of entity identifying data.
 *   Allowed keys are:
 *     id, type, bundle
 */
function registration_entity_slots_available($entity) {
  $capacity = registration_entity_settings($entity);
  $capacity = $capacity['settings']['capacity'];
  $result = db_select('registration', 'r')
    ->fields('r')
    ->condition('entity_type', $entity['type'])
    ->condition('entity_bundle', $entity['bundle'])
    ->condition('eid', $entity['id'])
    ->condition('status', 1)
    ->execute()
    ->rowCount();
  $available = 0;
  if ($result > $capacity) {
    return 0;
  }
  else {
    return $capacity - $result;
  }
}

/**
 * Returns the registration bundle for this particular entity.
 *
 * @param $entity
 *   Associate array of entity identifying data.
 *   Allowed keys are:
 *     id, type, bundle
 */
function registration_entity_registration_bundle($entity, $check_global = TRUE) {
  if (!isset($entity['id'])) {
    $entity['id'] = 0;
  }
  $q = db_select('registration_attach', 'ra')
    ->fields('ra', array('registration_bundle'))
    ->condition('entity_type', $entity['type'])
    ->condition('entity_bundle', $entity['bundle'])
    ->condition('entity_id', $entity['id'])
    ->execute()
    ->fetchCol();
  if (count($q) == 0) {
    if ($entity['id'] != 0 && $check_global) {
      // No settings found on a per-entity basis, check global entity settings
      unset($entity['id']);
      return registration_entity_registration_bundle($entity);
    }
    return '';
  }
  return $q[0];
}

/**
 * Returns the registration status for this particular entity.
 *
 * @param $entity
 *   Associate array of entity identifying data.
 *   Allowed keys are:
 *     id, type, bundle
 */
function registration_entity_registration_status($entity, $check_global = TRUE) {
  if (!isset($entity['id'])) {
    $entity['id'] = 0;
  }
  $q = db_select('registration_attach', 'ra')
    ->fields('ra', array('settings'))
    ->condition('entity_type', $entity['type'])
    ->condition('entity_bundle', $entity['bundle'])
    ->condition('entity_id', $entity['id'])
    ->execute()
    ->fetchCol();
  if (count($q) == 0) {
    if ($entity['id'] != 0 && $check_global) {
      // No settings found on a per-entity basis, check global entity settings
      unset($entity['id']);
      return registration_entity_registration_status($entity);
    }
    return 0;
  }
  $settings = $q[0];
  if (!is_array($settings)) {
    $settings = unserialize($settings);
  }
  return $settings['settings']['status'];
}

/**
 * Implements hook_node_type_delete().
 * @todo Delete registrations that belong to this node type.
 */
function registration_node_type_delete($info) {
  
}

/**
 * Access callback for registration_register_page().
 */
function registration_register_page_access($node) {
  $entity = array(
    'id' => $node->nid,
    'type' => 'node',
    'bundle' => $node->type,
  );
  if (registration_entity_registration_status($entity)) {
    if (user_access('administer registration') || user_access('add registration')) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Access callback for registration_registrations_page().
 */
function registration_administer_registrations_access($node) {
  $entity = array(
    'id' => $node->nid,
    'type' => 'node',
    'bundle' => $node->type,
  );
  if (registration_entity_registration_status($entity)) {
    if (user_access('administer registration')) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Page callback for adding a registration.
 *
 * @TODO Get registration bundle type to create for this entity.
 */
function registration_register_page($entity, $type) {
  $data = entity_extract_ids($type, $entity);
  $ent = array(
    'id' => $data[0],
    'type' => $type,
    'bundle' => $data[2],
  );
  if (registration_has_room($ent)) {
    $bundle = registration_entity_registration_bundle($ent);
    $registration = entity_create('registration', array('type' => $bundle));
    return drupal_get_form('registration_form', $registration, $entity, $type);
  }
  else {
    return t('Sorry, %name is sold out', array('%name' => $entity->title));
  }
}

/**
 * Page callback for viewing registrations
 *
 * @TODO Switch to entities and field values for items.
 */
function registration_registrations_page($entity) {
  $header = array(
    array(
      'data' => t('id'),
      'field' => 'registration_id',
      'type' => 'property',
      'specifier' => 'registration_id',
    ),
    array(
      'data' => t('Email'),
      'field' => 'mail',
      'type' => 'property',
      'specifier' => 'mail',
    ),
    array(
      'data' => t('Created By'),
      'field' => 'author_uid',
      'type' => 'property',
      'specifier' => 'author_uid',
    ),
    array(
      'data' => t('Count'),
      'field' => 'count',
      'type' => 'property',
      'specifier' => 'count',
    ),
    array(
      'data' => t('Created'),
      'field' => 'created',
      'sort' => 'desc',
      'type' => 'property',
      'specifier' => 'created',
    ),
    array(
      'data' => t('Actions'),
    ),
  );

  $data = entity_extract_ids($entity->type, $entity);
  $ent = array(
    'id' => $data[0],
    'type' => $entity->type,
    'bundle' => $data[2],
  );
  $query = new EntityFieldQuery;
  $result = $query
    ->entityCondition('entity_type', 'registration')
    ->propertyCondition('eid', $data[0])
    ->propertyCondition('entity_type', $entity->type)
    ->propertyCondition('entity_bundle', $data[2])
    ->pager(20)
    ->tableSort($header)
    ->execute();

  if (!empty($result['registration'])) {
    $registrations = registration_load_multiple(array_keys($result['registration']));

    $rows = array();
    foreach ($registrations as $registration) {
      $author = '';
      if ($registration->author_uid) {
        $author = user_load($registration->author_uid);
        $author = l($author->name, 'user/' . $author->uid);
      }
      $actions = array(
        l('View', 'registration/' . $registration->registration_id),
        l('Edit', 'registration/' . $registration->registration_id . '/edit'),
        l('Delete', 'registration/' . $registration->registration_id . '/delete'),
      );
      $email = entity_metadata_wrapper('registration', $registration);
      $email = $email->field_email->value();
      $rows[] = array(
        l($registration->registration_id, 'registration/' . $registration->registration_id),
        l($email, 'mailto:' . $email),
        $author,
        $registration->count,
        format_date($registration->created),
        implode(' | ', $actions)
      );
    }

    $settings = registration_entity_settings($ent);

    $table = array(
      'header' => $header,
      'rows' => $rows,
      'caption' => t('List of registrations for %title. !count of !capacity slots are filled.',
        array(
          '%title' => $entity->title,
          '!count' => '<strong>' . registration_event_count($ent) . '</strong>',
          '!capacity' => '<strong>' . $settings['capacity'] . '</strong>',
        )
      ),
    );

    $out = theme('table', $table) . theme('pager');
  }
  else {
    $out = t('There are no registratrants for %name',
      array('%name' => $entity->title));
  }

  return $out;
}

/**
 * Helper to determine if an entity has any slots left.
 */
function registration_has_room($entity) {
  $settings = registration_entity_settings($entity);
  $capacity = $settings['capacity'];
  if ($capacity) {
    $count = registration_event_count($entity);
    if (($capacity - $count) < 1) {
      return FALSE;
    }
  }
  return TRUE;
}

/**
 * Return the number of registrations for a given entity.
 *
 * @param $entity
 *
 * @return int
 */
function registration_event_count($entity) {
  $count = &drupal_static(__FUNCTION__, FALSE);
  if (!$count) {
    if (!isset($entity['id'])) {
      $entity['id'] = 0;
    }
    $count = db_select('registration', 'r')
      ->fields('r')
      ->condition('entity_type', $entity['type'])
      ->condition('entity_bundle', $entity['bundle'])
      ->condition('eid', $entity['id'])
      ->execute()->rowCount();
  }
  return $count;
}

/**
 * Implements hook_entity_delete().
 */
function registration_entity_delete($entity, $type) {
  // Notify field API that this entity was deleted.
  field_attach_delete($type, $entity);
  // Get some more info on this entity.
  $data = entity_extract_ids($type, $entity);
  // Delete all registrations attached to this entity.
  db_delete('registration')
    ->condition('eid', $data[0])
    ->condition('entity_type', $type)
    ->condition('entity_bundle', $data[2])
    ->execute();
  // Delete all registration settings for this entity.
  db_delete('registration_attach')
    ->condition('entity_id', $data[0])
    ->condition('entity_type', $type)
    ->condition('entity_bundle', $data[2])
    ->execute();
}

/**
 * Implements hook_node_delete().
 *
 * Deletes registrations and settings for this node.
 */
function registration_node_delete($node) {
  db_delete('registration')
    ->condition('entity_type', 'node')
    ->condition('entity_bundle', $node->type)
    ->condition('eid', $node->nid)
    ->execute();
  db_delete('registration_attach')
    ->condition('entity_id', $node->nid)
    ->condition('entity_type', 'node')
    ->condition('entity_bundle', $node->type)
    ->execute();
}

/**
 * Return all registration settings for a given entity.
 *
 * @param $entity
 *
 * @return array
 */
function registration_entity_settings($entity) {
  // @TODO: Add static variable handling.
  if (!isset($entity['id'])) {
    $entity['id'] = 0;
  }
  $result = db_select('registration_attach', 'ra')
    ->fields('ra')
    ->condition('entity_id', $entity['id'])
    ->condition('entity_type', $entity['type'])
    ->condition('entity_bundle', $entity['bundle'])
    ->execute()
    ->fetchAssoc();
  if ($result) {
    if (!is_array($result['settings'])) {
      $result['settings'] = unserialize($result['settings']);
    }
    return $result['settings'];
  }
  if ($entity['id'] != 0) {
    $entity['id'] = 0;
    return registration_entity_settings($entity);
  }
  else {
    return array();
  }
}

/**
 * Implements hook_mail().
 */
function registration_mail($key, &$message, $params) {
  if (module_exists('commerce_email')) {
    commerce_email_mail($key, $message, $params);
  }
  else {
    $subject = $params['subject'];
    $body = $params['message'];
    $message['subject'] .= str_replace(array("\r", "\n"), '', $subject);
    $message['body'][] = drupal_html_to_text($body);
  }
}

/**
 * Send an email to all registrations for a given entity.
 *
 * @param object $node
 */
function registration_send_broadcast($entity, $subject, $message) {
  global $language;

  // grab registration node settings
  $data = entity_extract_ids($entity->type, $entity);
  $ent = array(
    'id' => $data[0],
    'type' => $entity->type,
    'bundle' => $data[2],
  );
  $settings = registration_entity_settings($ent);
  $from = $settings['settings']['from_address'];

  // grab all registrations
  $query = new EntityFieldQuery();
  $entities = $query
    ->entityCondition('entity_type', 'registration')
    ->propertyCondition('entity_type', $entity->type)
    ->propertyCondition('entity_bundle', $data[2])
    ->propertyCondition('eid', $data[0])
    ->execute();

  if (!empty($entities)) {
    $recipients = array();

    $params = array(
      'subject' => $subject,
      'message' => $message,
    );

    // load registrations and build an array of recipients
    $registrations = registration_load_multiple(
      array_keys($entities['registration'])
    );

    // send the email to each registrant and communicate results
    $success_count = 0;
    foreach ($registrations as $registration) {
      // @TODO Get email address from field value
      $recipients[] = $registration->mail;
      $result = drupal_mail('registration', 'broadcast',
        $registration->mail, $language, $params, $from
      );
      if ($result['result']) {
        $success_count++;
      }
      else {
        watchdog('registration', 'Failed to send registration broadcast email to %email.',
          array('%email' => $registration->mail), 'WATCHDOG_ERROR'
        );
      }
    }

    if ($success_count) {
      drupal_set_message(t('Registration broadcast sent to @count registrants.',
        array('@count' => $success_count)
      ));
      watchdog('registration', 'Registration broadcast sent to @count registrants.',
        array('@count' => $success_count)
      );
    }
  }
  else {
    drupal_set_message(
      t('There are no participants registered for this %type.',
          array('%type' => $entity->type)),
      $type = 'warning'
    );
  }
}

/**
 * Update an entity's registration settings.
 *
 * @param $entity
 *   Associative array of entity info.
 *   Keys are id, type and bundle.
 * @param array $settings
 *   Associative array containing additional node registration settings.
 *   Keys are status, capacity, send_reminder, reminder_date, reminder_template
 *   and an associatve array of additional settings.
 */
function registration_update_entity_settings($entity_info, $settings) {
  // insert or udpate registration node settings
  db_merge('registration_attach')
    ->key(
      array(
        'entity_id' => $entity_info['id'],
        'entity_type' => $entity_info['type'],
        'entity_bundle' => $entity_info['bundle']
      )
    )
    ->fields($settings)
    ->execute();

  drupal_set_message(t('Registration settings have been saved.'));
}

/**
 * Implements hook_cron().
 */
function registration_cron_nope() {
  //@TODO: need to have a sensible batch limit, passed in as a limit param

  // grab all registrations that have reminders set for this day
  $results = db_select('registration', 'r')
    ->fields('r')
    ->execute()
    ->fetchAssoc();

  foreach ($results as $result) {
    $ent = array(
      'id' => $result->eid,
      'type' => $result->entity_type,
      'bundle' => $result->entity_bundle,
    );
    $entity = entity_get_controller($ent['type'])->load($ent['id']);
    $entity = $entity[$result->eid];
    if (module_exists('token')) {
      $message = token_replace($message, array('entity' => $entity));
    }
    $subject = 'Reminder for ' . $entity->title;
    registration_send_broadcast($entity, $subject, $message);
  }
}

/**
 * Implements hook_theme().
 */
function registration_theme() {
  return array(
    'registration' => array(
      'arguments' => array('registration' => NULL),
      'file' => 'includes/registration.theme.inc',
    ),
    'registration_types' => array(
      'arguments' => array('types' => NULL),
      'file' => 'includes/registration.theme.inc',
    ),
  );
}

/**
 * Default settings for entity registration.
 *
 * @return
 *  Array of default settings for a new entity registration association.
 */
function registration_default_settings() {
  $defaults = array(
    'capacity' => 0,
    'status' => 1,
    // unix timestamp of the closing date, default to one month from now
    'open_date' => REQUEST_TIME,
    'close_date' => strtotime('now +1 month'),
    'reminder' => 1,
    // reminder_time is set in minutes prior to closing date of registrations
    // we default 2 reminders to one week and 2 days prior to close
    'reminder_time' => array(7*24*60, 2*24*60),
    'notify' => 0,
    'notify_email' => array(),
  );

  $defaults += module_invoke_all('registration_default_settings');

  return $defaults;
}

/**
 * Implements hook_views_api().
 */
function registration_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'registration') . '/includes/views',
  );
}